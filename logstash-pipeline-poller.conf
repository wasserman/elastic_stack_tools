#############
#
# Logstash pipeline config to monitor Logstash.  
# - Use monitoring API to get metrics.  
# - Basically a sidecar pipeline for monitoring purposes.
#
# Drop this pipeline on existing Logstash instances to gather metrics, including things 
# like Elasticsearch ingest failures that typically show up as WARN log events in Logstash, 
# but sometimes complicated to catch since some environments dial down logs or don't ingest 
# them into Elastic out of fear of it overloading the server and filling up the drives.
#############

input {
  http_poller {
    urls => {
      test1 => "http://localhost:9600/_node/stats/pipelines"
    }
    request_timeout => 60
    # Supports "cron", "every", "at" and "in" schedules by rufus scheduler
    schedule => { cron => "* * * * * UTC"}
    codec => "json"
    # A hash of request metadata info (timing, response headers, etc.) will be sent here
    metadata_target => "http_poller_metadata"
  }
}

filter {
    # Ignore built-in monitoring pipelines
    prune {
        remove_field => ["[pipelines][.monitoring-logstash]"]
    }
    ruby {
        code => '
            p = event.get("pipelines")
            temp = []
            p.each { |k, v|
                v[:pipeline_name] = k
                temp.push(v)
            }
            event.set("pipelines", temp)
        '
    }
    split { field => "pipelines" }
}

output {
  elasticsearch {
    id                  => "elasticsearch_output"
    hosts               => ["https://elk1:9200","https://elk2:9200","https://elk3:9200"]
    keystore            => "/usr/share/logstash/config/certs/keystore.jks"
    keystore_password   => "KEYSTORE_PASSWORD"
    truststore          => "/usr/share/logstash/config/certs/truststore.jks"
    truststore_password => "TRUSTSTORE_PASSWORD"
    user                => "USER"
    password            => "PASSWORD"
    manage_template     => false
    index               => "logstash-metrics"
  }
}
